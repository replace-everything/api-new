{"version":3,"file":"vendors-node_modules_aws-sdk_credential-provider-sso_dist-es_index_js/main.js","mappings":"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","sources":["webpack://api/./node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js","webpack://api/./node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js","webpack://api/./node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js","webpack://api/./node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js","webpack://api/./node_modules/@aws-sdk/credential-provider-sso/dist-es/types.js","webpack://api/./node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js","webpack://api/./node_modules/@aws-sdk/token-providers/dist-es/constants.js","webpack://api/./node_modules/@aws-sdk/token-providers/dist-es/fromSso.js","webpack://api/./node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js","webpack://api/./node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js","webpack://api/./node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js","webpack://api/./node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js","webpack://api/./node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, loadSsoSessionData, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { isSsoProfile } from \"./isSsoProfile\";\nimport { resolveSSOCredentials } from \"./resolveSSOCredentials\";\nimport { validateSsoProfile } from \"./validateSsoProfile\";\nexport const fromSSO = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-sso\", \"fromSSO\");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    const { ssoClient } = init;\n    const profileName = getProfileName(init);\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await parseKnownFiles(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError(`Profile ${profileName} was not found.`);\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await loadSsoSessionData(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"');\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n};\n","export * from \"./fromSSO\";\nexport * from \"./isSsoProfile\";\nexport * from \"./types\";\nexport * from \"./validateSsoProfile\";\n","export const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","import { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getSSOTokenFromFile } from \"@smithy/shared-ini-file-loader\";\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, profile, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await import(\"./loadSso\");\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope } = {} } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration), credentialScope };\n};\n","export {};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const validateSsoProfile = (profile) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", ` +\n            `\"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);\n    }\n    return profile;\n};\n","export const EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nexport const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@smithy/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/token-providers\", \"fromSso\");\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName(init);\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile[\"sso_session\"]) {\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n","import { getSsoOidcClient } from \"./getSsoOidcClient\";\nexport const getNewSsoOidcToken = async (ssoToken, ssoRegion) => {\n    const { CreateTokenCommand } = await import(\"./loadSsoOidc\");\n    const ssoOidcClient = await getSsoOidcClient(ssoRegion);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: \"refresh_token\",\n    }));\n};\n","const ssoOidcClientsHash = {};\nexport const getSsoOidcClient = async (ssoRegion) => {\n    const { SSOOIDCClient } = await import(\"./loadSsoOidc\");\n    if (ssoOidcClientsHash[ssoRegion]) {\n        return ssoOidcClientsHash[ssoRegion];\n    }\n    const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });\n    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;\n    return ssoOidcClient;\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === \"undefined\") {\n        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { getSSOTokenFilepath } from \"@smithy/shared-ini-file-loader\";\nimport { promises as fsPromises } from \"fs\";\nconst { writeFile } = fsPromises;\nexport const writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = getSSOTokenFilepath(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n"],"names":[],"sourceRoot":""}
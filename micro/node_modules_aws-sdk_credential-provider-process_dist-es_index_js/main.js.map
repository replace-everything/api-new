{"version":3,"file":"node_modules_aws-sdk_credential-provider-process_dist-es_index_js/main.js","mappings":";;;;;;;;;;;;;;;;;AAAiF;AACT;AACjE,8BAA8B;AACrC;AACA,2BAA2B,+EAAe;AAC1C,WAAW,qFAAyB,CAAC,8EAAc;AACnD;;;;;;;;;;;;;;;ACNO;AACP;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;AACA;AACA;AACA;AACA;AACA,mCAAmC,iCAAiC;AACpE,iCAAiC,uCAAuC;AACxE,sCAAsC,uCAAuC;AAC7E;AACA;;;;;;;;;;;;;;;;ACrB8B;;;;;;;;;;;;;;;;;;;;;ACAuC;AAChC;AACJ;AACiD;AAC3E;AACP;AACA;AACA;AACA;AACA,gCAAgC,+CAAS,CAAC,+CAAI;AAC9C;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA,uBAAuB,+FAA8B;AACrD;AACA;AACA,0BAA0B,+EAAwB;AAClD;AACA;AACA;AACA,sBAAsB,+EAAwB,YAAY,aAAa;AACvE;AACA;AACA;AACA,kBAAkB,+EAAwB,YAAY,aAAa;AACnE;AACA","sources":["webpack://api/./node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js","webpack://api/./node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js","webpack://api/./node_modules/@aws-sdk/credential-provider-process/dist-es/index.js","webpack://api/./node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js"],"sourcesContent":["import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProcessCredentials } from \"./resolveProcessCredentials\";\nexport const fromProcess = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-process\", \"fromProcess\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProcessCredentials(getProfileName(init), profiles);\n};\n","export const getValidatedProcessCredentials = (profileName, data) => {\n    if (data.Version !== 1) {\n        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n    }\n    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {\n        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n    }\n    if (data.Expiration) {\n        const currentTime = new Date();\n        const expireTime = new Date(data.Expiration);\n        if (expireTime < currentTime) {\n            throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n        }\n    }\n    return {\n        accessKeyId: data.AccessKeyId,\n        secretAccessKey: data.SecretAccessKey,\n        ...(data.SessionToken && { sessionToken: data.SessionToken }),\n        ...(data.Expiration && { expiration: new Date(data.Expiration) }),\n        ...(data.CredentialScope && { credentialScope: data.CredentialScope }),\n    };\n};\n","export * from \"./fromProcess\";\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\nexport const resolveProcessCredentials = async (profileName, profiles) => {\n    const profile = profiles[profileName];\n    if (profiles[profileName]) {\n        const credentialProcess = profile[\"credential_process\"];\n        if (credentialProcess !== undefined) {\n            const execPromise = promisify(exec);\n            try {\n                const { stdout } = await execPromise(credentialProcess);\n                let data;\n                try {\n                    data = JSON.parse(stdout.trim());\n                }\n                catch {\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n                }\n                return getValidatedProcessCredentials(profileName, data);\n            }\n            catch (error) {\n                throw new CredentialsProviderError(error.message);\n            }\n        }\n        else {\n            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);\n        }\n    }\n    else {\n        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);\n    }\n};\n"],"names":[],"sourceRoot":""}
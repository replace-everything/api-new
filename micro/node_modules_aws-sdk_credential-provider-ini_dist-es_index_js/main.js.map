{"version":3,"file":"node_modules_aws-sdk_credential-provider-ini_dist-es_index_js/main.js","mappings":";;;;;;;;;;;;;;;;;AAAiF;AACvB;AACnD,0BAA0B;AACjC;AACA,2BAA2B,+EAAe;AAC1C,WAAW,uEAAkB,CAAC,8EAAc;AAC5C;;;;;;;;;;;;;;;;ACN0B;;;;;;;;;;;;;;;;;;;;ACA2C;AACL;AACI;AACV;AACnD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,gGAAgG;AACvG;AACA;AACA;AACA,gBAAgB,wBAAwB,QAAQ,kWAAmB;AACnE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,iBAAiB;AAC7B;AACA,kBAAkB,+EAAwB;AAC1C,gBAAgB,8EAAc,UAAU;AACxC;AACA;AACA;AACA,UAAU,uEAAkB;AAC5B;AACA;AACA,SAAS;AACT,iBAAiB,iFAAuB;AACxC;AACA;AACA,iEAAiE,WAAW;AAC5E;AACA;AACA;AACA,YAAY,aAAa;AACzB;AACA;AACA,sBAAsB,+EAAwB,YAAY,aAAa;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpDqE;AAC9D;AACP;AACA,mCAAmC,8QAA0C,SAAS,uBAAuB;AAC7G,0CAA0C,8QAA0C,SAAS,sBAAsB;AACnH,kCAAkC,sQAA0C,SAAS,SAAS;AAC9F;AACA;AACA;AACA;AACA;AACA,kBAAkB,+EAAwB,6CAA6C,YAAY,QAAQ,iBAAiB;AAC5H;AACA;AACA;;;;;;;;;;;;;;;;ACdO;AACA,8DAA8D,kRAA8C,SAAS,aAAa;AACzI;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;ACJoE;AAC8B;AACT;AACZ;AACc;AACU;AAC/F,sFAAsF;AAC7F;AACA,mDAAmD,+EAAoB;AACvE,eAAe,mFAAwB;AACvC;AACA,QAAQ,kFAAmB;AAC3B,eAAe,2FAA4B;AAC3C;AACA,QAAQ,+EAAoB;AAC5B,eAAe,mFAAwB;AACvC;AACA,QAAQ,oFAAoB;AAC5B,eAAe,6FAA6B;AAC5C;AACA,QAAQ,4EAAgB;AACxB,eAAe,qFAAyB;AACxC;AACA,QAAQ,oEAAY;AACpB,qBAAqB,6EAAqB;AAC1C;AACA,cAAc,+EAAwB,YAAY,aAAa;AAC/D;;;;;;;;;;;;;;;;AC3BO,0DAA0D;AACjE,YAAY,UAAU,QAAQ,8QAA0C;AACxE;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACZO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;ACbO;AACP;AACA;AACA;AACA;AACO,kEAAkE,iSAAmD,SAAS,eAAe;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://api/./node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js","webpack://api/./node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js","webpack://api/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","webpack://api/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","webpack://api/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","webpack://api/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","webpack://api/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","webpack://api/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","webpack://api/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js"],"sourcesContent":["import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini\", \"fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName(init), profiles, init);\n};\n","export * from \"./fromIni\";\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n    (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));\nconst isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\nconst isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini\", \"resolveAssumeRoleCredentials (STS)\");\n    const data = profiles[profileName];\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"./loadSts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: options?.parentClientConfig,\n        }, options.clientPlugins);\n    }\n    const { source_profile } = data;\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), false);\n    }\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, profiles, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        })\n        : (await resolveCredentialSource(data.credential_source, profileName)(options))();\n    const params = {\n        RoleArn: data.role_arn,\n        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n        ExternalId: data.external_id,\n        DurationSeconds: parseInt(data.duration_seconds || \"3600\", 10),\n    };\n    const { mfa_serial } = data;\n    if (mfa_serial) {\n        if (!options.mfaCodeProvider) {\n            throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);\n        }\n        params.SerialNumber = mfa_serial;\n        params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n    }\n    const sourceCreds = await sourceCredsProvider;\n    return options.roleAssumer(sourceCreds, params);\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName) => {\n    const sourceProvidersMap = {\n        EcsContainer: (options) => import(\"@smithy/credential-provider-imds\").then(({ fromContainerMetadata }) => fromContainerMetadata(options)),\n        Ec2InstanceMetadata: (options) => import(\"@smithy/credential-provider-imds\").then(({ fromInstanceMetadata }) => fromInstanceMetadata(options)),\n        Environment: (options) => import(\"@aws-sdk/credential-provider-env\").then(({ fromEnv }) => fromEnv(options)),\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`);\n    }\n};\n","export const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})());\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleProfile(data)) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, options);\n    }\n    throw new CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);\n};\n","export const resolveSsoCredentials = async (profile, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n    })();\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","export const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1;\nexport const resolveStaticCredentials = (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini\", \"resolveStaticCredentials\");\n    return Promise.resolve({\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        credentialScope: profile.aws_credential_scope,\n    });\n};\n","export const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})());\n"],"names":[],"sourceRoot":""}
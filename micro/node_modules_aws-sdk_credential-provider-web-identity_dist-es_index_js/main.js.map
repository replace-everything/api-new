{"version":3,"file":"node_modules_aws-sdk_credential-provider-web-identity_dist-es_index_js/main.js","mappings":";;;;;;;;;;;;;;;;;;;AAAqE;AACnC;AACY;AAC9C;AACA;AACA;AACO,gCAAgC;AACvC;AACA;AACA;AACA;AACA;AACA,kBAAkB,+EAAwB;AAC1C;AACA,WAAW,2DAAY;AACvB;AACA,0BAA0B,gDAAY,yBAAyB,mBAAmB;AAClF;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;ACpBO;AACP;AACA,YAAY,8FAA8F;AAC1G,UAAU,6BAA6B;AACvC;AACA,gBAAgB,uCAAuC,QAAQ,oXAAmB;AAClF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kEAAkE,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;ACrBgC;AACD","sources":["webpack://api/./node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js","webpack://api/./node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js","webpack://api/./node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { readFileSync } from \"fs\";\nimport { fromWebToken } from \"./fromWebToken\";\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\nexport const fromTokenFile = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity\", \"fromTokenFile\");\n    const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];\n    const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];\n    const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];\n    if (!webIdentityTokenFile || !roleArn) {\n        throw new CredentialsProviderError(\"Web identity configuration not specified\");\n    }\n    return fromWebToken({\n        ...init,\n        webIdentityToken: readFileSync(webIdentityTokenFile, { encoding: \"ascii\" }),\n        roleArn,\n        roleSessionName,\n    })();\n};\n","export const fromWebToken = (init) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity\", \"fromWebToken\");\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;\n    let { roleAssumerWithWebIdentity } = init;\n    if (!roleAssumerWithWebIdentity) {\n        const { getDefaultRoleAssumerWithWebIdentity } = await import(\"./loadSts\");\n        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({\n            ...init.clientConfig,\n            credentialProviderLogger: init.logger,\n            parentClientConfig: init.parentClientConfig,\n        }, init.clientPlugins);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n","export * from \"./fromTokenFile\";\nexport * from \"./fromWebToken\";\n"],"names":[],"sourceRoot":""}